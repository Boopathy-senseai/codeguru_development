# name: Code Review with CodeGuru and Comment Feedback

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# permissions:
#   id-token: write
#   security-events: write
#   actions: read
#   contents: read
#   pull-requests: write  # Allows writing comments on PRs

# jobs:
#   code-review:
#     runs-on: ubuntu-latest

#     steps:
#       # Step 1: Checkout the code
#       - name: Checkout Repository
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0  # Ensure all history is fetched for analysis

#       # Step 2: Configure AWS credentials for CodeGuru
#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           role-to-assume: arn:aws:iam::325442430825:role/CodeGuruSecurityGitHubAccessRole
#           aws-region: us-east-2
#           role-session-name: GitHubActionScript

#       # Step 3: Run CodeGuru Security Analysis
#       - name: Run CodeGuru Security Analysis
#         uses: aws-actions/codeguru-security@v1
#         with:
#           source_path: .  # Analyze the root source path
#           aws_region: us-east-2
#           fail_on_severity: Critical
#           scan_name: CGS-Github-codeguru_development

#       # Step 4: Check for SARIF Results and Prepare Comment
#       - name: Prepare SARIF Findings and Feedback
#         id: prepare_comment
#         if: always()
#         run: |
#           if [ -f codeguru-security-results.sarif.json ]; then
#             FINDINGS_COUNT=$(jq '.runs[].results | length' codeguru-security-results.sarif.json)
#             if [ "$FINDINGS_COUNT" -gt 0 ]; then
#               COMMENT_CONTENT=$(jq -r '.runs[].results[] | select(.level == "error" or .level == "warning") | "- " + .message.text' codeguru-security-results.sarif.json)
#               if [ -n "$COMMENT_CONTENT" ]; then
#                 echo "### CodeGuru Security Analysis Results" > comment.md
#                 echo "$COMMENT_CONTENT" >> comment.md
#                 echo "comment-prepared=true" >> $GITHUB_ENV
#                 echo "Findings prepared for comment."
#               else
#                 echo "No critical or warning findings detected in the analysis."
#               fi
#             else
#               echo "No findings were detected in the SARIF results."
#             fi
#           else
#             echo "No SARIF file found; ensure the CodeGuru analysis ran properly."
#             echo "comment-prepared=false" >> $GITHUB_ENV
#           fi  # Added this fi to properly close the outermost if block
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#       # Step 5: Create or Update PR Comment
#       - name: Create or Update PR Comment
#         if: env.comment-prepared == 'true' && github.event_name == 'pull_request'
#         uses: peter-evans/create-or-update-comment@v2
#         with:
#           issue-number: ${{ github.event.pull_request.number }}
#           body: |
#             $(cat comment.md)
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
name: Post flake8 Report
on:
  pull_request:
    types: [opened, synchronize]

permissions:
  issues: write
  pull_requests: write

jobs:
  post-flake8-report:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codex
        uses: actions/checkout@v3

      - name: Install Python and flake8
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          pip install flake8
          flake8 . --output-file=flake8-report.json || true

      - name: Comment on PR with flake8 report
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('flake8-report.json', 'utf-8');
            const commentBody = `### flake8 Report\n\`\`\`json\n${report}\n\`\`\``;

            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.payload.pull_request.number,
              body: commentBody,
            });
